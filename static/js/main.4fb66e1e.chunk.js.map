{"version":3,"sources":["components/HighlightButton.js","components/ApplyButton.js","components/AutoplayButton.js","components/LogItems.js","components/Log.js","components/Possibilities.js","components/Cell.js","Highlighter.js","App.js","registerServiceWorker.js","index.js"],"names":["HighlightButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","action","bind","assertThisInitialized","react_default","a","createElement","onClick","step","React","Component","ApplyButton","state","AutoplayButton","LogItems","context","formatItems","item","key","text","listItems","items","map","className","Log","LogItems_LogItems","Possibilities","cell","highlight","possibility","classes","on","facet","facets","filter","v","id","cannotBe","mustBe","exclude","hiddenCells","includes","digits","ruleOut","keep","_this$props","possibilities","concat","Cell","highLightClass","box","boxClasses","locked","content","digit","length","cellContent","digitClasses","isHighlighted","Possibilities_Possibilities","toConsumableArray","showContent","off","grid","defaultHighlight","cells","strategy","rows","columns","squares","row","column","square","canSee","nakedSingle","used","i","hiddenSingle","nextColor","color","bgcolor","colors","unfilledCellsInHouse","house","type","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","unfilledCell","value","seenByCells","seenBy","seenInSquare","squareID","shift","seenOutsideSquare","houseCells","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Symbol","iterator","next","done","houseCell","err","return","_iterator","naked","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","indexOf","some","p","join","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","hidden","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","lockedCandidate","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","ids","unfilledCellsInLocked","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","has","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","lockedeCells","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","lockedeCell","fish","targetCells","rowID","columnID","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","rowCells","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","rowCell","columnCells","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","columnCell","r","xyChain","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","chain","link","push","start","end","excluded","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","Highlighter","currentState","machine","Off","NakedSingle","HiddenSingle","Naked","Hidden","LockedCandidate","Fish","XYChain","clear","transition","changes","App","highLight","solver","highlighter","input","setState","unshift","apply","autoplay","toggleAutoplay","setTimeout","Solver","loadGridFromHash","window","location","hash","substring","replace","isValid","message","_this2","self","onhashchange","timerID","setInterval","clearInterval","_this$state","showColumn","showRow","Cell_Cell","showSquare","HighlightButton_HighlightButton","ApplyButton_ApplyButton","AutoplayButton_AutoplayButton","Log_Log","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4fb66e1e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class HighlightButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.props.action.bind(this);\n    }\n\n    render() {\n        return (\n            <button onClick={this.handleClick}>\n                Hightlight step {this.props.step}\n            </button>\n        );\n    }\n}","import React from 'react';\n\nexport default class ApplyButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {step: props.step};\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.props.action.bind(this);\n    }\n\n \n    render() {\n        return (\n            <button onClick={this.handleClick}>\n                apply next step\n            </button>\n        );\n    }\n}","import React from 'react';\n\nexport default class AutoplayButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.props.action.bind(this);\n    }\n\n    render() {\n        return (\n            <button onClick={this.handleClick}>\n                Auto play >> \n            </button>\n        );\n    }\n}","import React from 'react';\n\nexport default class LogItems extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.formatItems = this.formatItems.bind(this);\n    }\n\n    formatItems(item) {\n        return <li key={item.key}>{item.text}</li>\n    }\n\n    render() {\n        const { items } = this.props\n        var listItems = items.map(this.formatItems);\n        \n        return (\n            <ul className=\"theList\">\n                {listItems}\n            </ul>\n        );\n    }\n};\n","import React from 'react';\nimport LogItems from './LogItems';\n\nexport default class Log extends React.Component {\n  // constructor(props) {\n  //   super(props)\n  // }\n\n  render() {\n    const { items } = this.props\n\n    return (\n      <div className=\"todoListMain\">\n        <LogItems items={items} key='logItems'/>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nexport default class Possibilities extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // } \n\n    exclude(cell, highlight,  possibility){\n        let classes = ''\n\n        if( highlight.on){\n            let facet = highlight.facets.filter( v => v.id === cell.id)[0]\n            if(facet){\n                if(facet.cannotBe === possibility){\n                    classes = classes + ' cannotBe' \n                }  \n                if(facet.mustBe === possibility){\n                    classes = classes + ' mustBe' \n                }    \n                if(facet.exclude === possibility){\n                    classes = classes + ' exclude' \n                }                                                  \n            } \n\n            if( highlight.hiddenCells.includes(cell.id) && !highlight.digits.includes(possibility)){\n                classes = classes + ' exclude' \n            }   \n            if( highlight.hiddenCells.includes(cell.id) && highlight.digits.includes(possibility)){\n                classes = classes + ' keep' \n            }      \n\n            // rule out possibilities in house\n            if( highlight.ruleOut.includes(cell.id) && highlight.digits.includes(possibility)){\n                classes = classes + ' exclude' \n            }   \n\n            // target cell keep\n            if( highlight.keep.includes(cell.id) && highlight.digits.includes(possibility)){\n                classes = classes + ' keep' \n            }               \n        }\n    \n        return classes\n      } \n\n    render() {\n        const { cell, possibilities, highlight } = this.props \n\n        return (\n            <div className='possibilities'>\n                {possibilities.map( possibility => {\n                    return <span className={`${this.exclude(cell, highlight, possibility)}`} key={cell.id + '-' + possibility} >{possibility}</span>\n                })}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Possibilities from './Possibilities';\n\nexport default class Cell extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    isHighlighted(cell, highlight){\n        let highLightClass = ''\n\n\n        //if( highlight.on){\n        //  if( highlight.cell){\n\n    \n          // if( highlight.cell.id === cell.id ){\n          //   highLightClass = 'targetCell' \n          // }\n    \n          // if(highlight.strategy.type === 'NakedSingle'){\n          //   // if( highlight.cell.column === cell.column ){\n          //   //   highLightClass = highLightClass + ' highlightColumn'\n          //   // }    \n        \n          //   // if(  highlight.cell.row === cell.row ){\n          //   //   highLightClass = highLightClass + ' highlightRow'\n          //   // }       \n          \n          //   // if(  highlight.cell.square === cell.square ){\n          //   //   highLightClass = highLightClass + ' highlightSquare'\n          //   // }  \n          // }            \n        \n\n          // if(highlight.strategy.type === 'HiddenSingle'){\n          //  // console.log(highlight)\n          //   if( highlight.house.type === 'row' &&  highlight.house.id === cell.rowID){\n          //     highLightClass = highLightClass + ' highlightRow'\n          //   }    \n        \n          //   if( highlight.house.type === 'column' &&  highlight.house.id === cell.columnID){\n          //     highLightClass = highLightClass + ' highlightColumn'\n          //   }       \n          \n          //   if( highlight.house.type === 'square' &&  highlight.house.id === cell.squareID){\n          //     highLightClass = highLightClass + ' highlightSquare'\n          //   }  \n          // }  \n       // }\n\n          // if(highlight.strategy.type === 'Naked'){\n            \n          //   //  if( highlight.house.type === 'row' &&  highlight.house.id === cell.rowID){\n          //   //    highLightClass = highLightClass + ' highlightRow'\n          //   //  }    \n         \n          //   //  if( highlight.house.type === 'column' &&  highlight.house.id === cell.columnID){\n          //   //    highLightClass = highLightClass + ' highlightColumn'\n          //   //  }       \n           \n          //   //  if( highlight.house.type === 'square' &&  highlight.house.id === cell.squareID){\n          //   //    highLightClass = highLightClass + ' highlightSquare'\n          //   //  }  \n          //  }  \n           \n          //  if( highlight.strategy.type === 'LockedCandidate'){\n            \n          //   //  if( (highlight.house.type === 'row' &&  highlight.house.id === cell.rowID) || (highlight.locked.type === 'row' &&  highlight.locked.id === cell.rowID)){\n          //   //    highLightClass = highLightClass + ' highlightRow'\n          //   //  }    \n         \n          //   //  if( (highlight.house.type === 'column' &&  highlight.house.id === cell.columnID) || (highlight.locked.type === 'column' &&  highlight.locked.id === cell.columnID)){\n          //   //    highLightClass = highLightClass + ' highlightColumn'\n          //   //  }       \n           \n          //   //  if( (highlight.house.type === 'square' &&  highlight.house.id === cell.squareID) || (highlight.locked.type === 'square' &&  highlight.locked.id === cell.squareID)){\n          //   //    highLightClass = highLightClass + ' highlightSquare'\n          //   //  }  \n          //  }              \n        //}\n    \n        if( highlight.on){\n          let facet = highlight.facets.filter( v => v.id === cell.id)[0]\n          if(facet){\n            highLightClass = highLightClass + facet.box\n          }\n                  \n\n          if(highlight.boxClasses[cell.id]){\n            highLightClass = highLightClass + highlight.boxClasses[cell.id]\n          } \n\n            if(highlight.boxClasses[cell.id]){\n              highLightClass = highLightClass + highlight.boxClasses[cell.id]\n            } \n            \n            if( highlight.ruleOut.includes(cell.id) ){\n              highLightClass = highLightClass +  ' highlight2 ' \n            }            \n          }\n          else{\n            if(cell.locked){\n              highLightClass = highLightClass +  '  locked '\n            }\n          }\n\n        return highLightClass\n      }    \n\n      showContent(cell, highlight){\n\n        // remove zero from blanks\n        let content = ''  \n        if(cell.digit){\n          content = cell.digit\n        }      \n    \n        if( highlight.on){\n          if( highlight.cell){\n            if(highlight.cell && highlight.cell.id === cell.id && highlight.digits.length === 1){\n              content = highlight.digits\n            }  \n          }       \n\n          if(highlight.cellContent[cell.id]){\n            content = highlight.cellContent[cell.id]\n          } \n        }\n\n        return content\n      }   \n\n      digitClasses(cell, highlight){   \n        let classes = 'digit ' \n\n        if( highlight.on){\n          if(highlight.cell && highlight.cell.id === cell.id){\n            classes = classes + 'tentative '\n          }  \n\n          if(highlight.digitClasses[cell.id]){\n            classes = classes + highlight.digitClasses[cell.id]\n          }                    \n        } \n        \n        \n        return classes\n      }       \n\n    render() {\n        const { cell, highlight} = this.props\n\n        return (\n            <div className={`box ${this.isHighlighted(cell, highlight)}`} id={`cell-${cell.id}`} key={cell.id}>\n                <Possibilities cell={cell} possibilities={[...cell.possibilities]} highlight={highlight} />\n                {/* <div className='possibilities'>{cell.possibilities}</div> */}\n                <div className={this.digitClasses(cell, highlight)}>\n                    {this.showContent(cell, highlight)}\n                </div>\n            </div>\n        );\n    }\n}\n","const off = (grid) => {\n  //console.log(`remove highlighting`);\n}\n\nconst defaultHighlight = (grid, step) => {\n  let cell = grid.cells[step.id]\n\n  let highlight = {\n    on : true,\n    boxClasses : [],\n    digitClasses : [],  \n    strategy : step.strategy,\n    cellContent : {},\n    hiddenCells : [], \n    ruleOut : [],\n    keep : [],\n    digits : [step.digit],   \n    rows : [],\n    columns : [],\n    squares : [],\n    facets : []        \n  }\n\n  if(cell){\n    highlight.boxClasses[cell.id] = ' targetCell' \n\n    highlight.rows = [cell.row]\n    highlight.columns = [cell.column]\n    highlight.squares = [cell.square]\n    highlight.ruleOut = [...cell.canSee].filter(cell => [...cell.possibilities].includes(step.digit) ).map(v=>v.id)\n  }\n\n  return highlight\n}\n\nconst nakedSingle = (grid, step) => {\n  let highlight = defaultHighlight(grid, step)\n  let cell = grid.cells[step.id]\n\n  highlight.rows = [cell.row]\n  highlight.columns = [cell.column]\n  highlight.squares = [cell.square]\n  highlight.ruleOut = [...cell.canSee].filter(cell => [...cell.possibilities].includes(step.digit) ).map(v=>v.id)    \n  highlight.keep = [step.id]\n\n  // colour if all other digitis used\n  if(step.used.length === 8){\n    for(let i=0; i<8; i++){\n      let cell = grid.cells[step.used[i]]\n      highlight.boxClasses[cell.id] = highlight.boxClasses[cell.id]? highlight.boxClasses[cell.id] + ' bgcolor' + cell.digit : ' bgcolor' + cell.digit \n      highlight.digitClasses[cell.id] = highlight.digitClasses[cell.id] ? highlight.digitClasses[cell.id] + ' color' + cell.digit : ' color' + cell.digit\n    }\n  }  \n\n  highlight.boxClasses[step.id] = ' targetCell '\n  highlight.digits = [step.digit]\n  highlight.cellContent[step.id] = step.digit\n\n  return highlight\n}\n\nconst hiddenSingle = (grid, step) => {\n  let highlight = defaultHighlight(grid, step)\n  let cell = grid.cells[step.id]\n  let colors = [1,2,3,4,5,6,7,8,9]\n\n  let unfilledCellsInHouse = grid[step.house.type][step.house.id].cells.filter( v => v.digit === 0).filter(v=> v.id !== cell.id)\n  let nextColor\n  let color\n  let bgcolor \n  for( let unfilledCell of unfilledCellsInHouse){\n    let seenByCells = [...unfilledCell.canSee].filter( v => v.digit === step.digit)\n    let seenBy \n\n    let seenInSquare = seenByCells.filter( v=> v.squareID === unfilledCell.squareID)\n    if(seenInSquare.length){\n    \n        seenBy = seenInSquare[0] \n        if(!highlight.digitClasses[seenBy.id]){\n          nextColor = colors.shift()\n          color = ' color' + nextColor\n          bgcolor = ' bgcolor' + nextColor\n          highlight.digitClasses[seenBy.id] = color + bgcolor\n          highlight.digitClasses[unfilledCell.id] = ' color' + nextColor              \n        } else {\n          highlight.digitClasses[seenBy.id] = highlight.digitClasses[seenBy.id] \n          highlight.digitClasses[unfilledCell.id] = ' color' + nextColor              \n        }\n\n\n    }\n    else{\n      \n      let seenOutsideSquare = seenByCells.filter( v=> v.squareID !== unfilledCell.squareID)\n      if(seenOutsideSquare.length){\n        seenBy = seenOutsideSquare[0] \n        if(!highlight.digitClasses[seenBy.id]){\n          nextColor = colors.shift()\n          color = ' color' + nextColor\n          bgcolor = ' bgcolor' + nextColor\n          highlight.digitClasses[seenBy.id] = color + bgcolor\n          highlight.digitClasses[unfilledCell.id] = 'color' + nextColor              \n        } else {\n          highlight.digitClasses[seenBy.id] = highlight.digitClasses[seenBy.id] \n          highlight.digitClasses[unfilledCell.id] = 'color' + nextColor              \n        }\n      }  \n    }\n  \n    highlight.keep = [step.id]\n    highlight.cellContent[unfilledCell.id] = 'X'\n\n    let houseCells = grid[step.house.type][step.house.id].cells.filter(v=> v.id !== cell.id)\n    for( let houseCell of houseCells){\n      highlight.boxClasses[houseCell.id] = highlight.boxClasses[houseCell.id]  + ' highlightRow'\n    }\n  }\n\n  return highlight\n}\n\nconst naked = (grid, step) => {\n  let highlight = defaultHighlight(grid, step)\n\n    for( let id of step.id){\n      highlight.boxClasses[id] = ' targetCell '\n    }\n\n    highlight.ruleOut = grid[step.house.type][step.house.id].cells\n    .filter( v => v.digit === 0) //unused\n    .filter( v => step.id.indexOf(v.id) === -1)  // not in naked\n    .filter( v => [...v.possibilities].some(p=> [...step.digits].includes(p))) // has digits as possibles\n    .map(v=>v.id) \n\n    highlight.digits = [...step.digits]\n\n\n    let cells = grid[step.house.type][step.house.id].cells.filter( v=> step.id.includes(v.id))\n    highlight.rows = cells.map( v=> `${v.row}`).join(' ')\n    highlight.columns = cells.map( v=> `${v.column}`).join(' ')\n    highlight.squares = cells.map( v=> `${v.square}`).join(' ')\n\n    highlight.keep = step.id\n\n    let houseCells = grid[step.house.type][step.house.id].cells.filter( v=> !step.id.includes(v.id))\n    for( let houseCell of houseCells){\n      highlight.boxClasses[houseCell.id] = ' highlightRow'\n    }    \n\n    return highlight\n}\n\nconst hidden = (grid, step) => {\n  let highlight = defaultHighlight(grid, step)\n\n      for( let id of step.id){\n        highlight.boxClasses[id] = ' targetCell '\n      }\n      highlight.ruleOut = []\n\n      highlight.digits = [...step.digits]\n\n      let cells = grid[step.house.type][step.house.id].cells.filter( v=> step.id.includes(v.id))\n      highlight.rows = cells.map( v=> `${v.row}`).join(' ')\n      highlight.columns = cells.map( v=> `${v.column}`).join(' ')\n      highlight.squares = cells.map( v=> `${v.square}`).join(' ')\n\n      highlight.hiddenCells = step.id\n\n      return highlight      \n}\n\nconst lockedCandidate = (grid, step) => {\n  let colors = [1,2,3,4,5,6,7,8,9]\n\n  let highlight = defaultHighlight(grid, step)\n  \n  for( let id of step.ids){\n    highlight.boxClasses[id] = ' targetCell '\n  }\n        //\n        let lockedHouse = grid[step.house.type][step.house.id]\n  \n        let unfilledCellsInLocked = lockedHouse.cells\n        .filter( v => v.digit === 0)\n        .filter( v => !step.ids.includes(v.id))\n  \n        \n        let nextColor\n        let color\n        let bgcolor \n  \n        for( let unfilledCell of unfilledCellsInLocked){\n          let seenByCells = [...unfilledCell.canSee].filter( v => v.digit === step.digit)\n          let seenBy = seenByCells[0] \n  \n          if(seenBy){\n            if(!highlight.digitClasses[seenBy.id]){\n              nextColor = colors.shift()\n              color = ' color' + nextColor\n              bgcolor = ' bgcolor' + nextColor\n              highlight.digitClasses[seenBy.id] = color + bgcolor\n              highlight.digitClasses[unfilledCell.id] = ' color' + nextColor              \n            } else {\n              highlight.digitClasses[seenBy.id] = highlight.digitClasses[seenBy.id] \n              highlight.digitClasses[unfilledCell.id] = ' color' + nextColor              \n            }\n          }\n             \n          highlight.cellContent[unfilledCell.id] = 'X'\n        }\n  \n        //      \n        highlight.ruleOut = grid[step.locked.type][step.locked.id].cells\n        .filter( v => step.ids.indexOf(v.id) === -1 )\n        .filter( v => v.possibilities.has(step.digit))  \n        .map(v=>v.id)    \n        \n        highlight.keep = step.ids\n  \n        highlight.digits = [step.digit]\n  \n        highlight.locked = step.locked\n  \n        let cells = grid[step.house.type][step.house.id].cells.filter( v=> step.ids.includes(v.id))\n        highlight.rows = cells.map( v=> `${v.row}`).join(' ')\n        highlight.columns = cells.map( v=> `${v.column}`).join(' ')\n        highlight.squares = cells.map( v=> `${v.square}`).join(' ')\n\n        let houseCells = grid[step.house.type][step.house.id].cells.filter( v=> !step.ids.includes(v.id))\n        for( let houseCell of houseCells){\n          highlight.boxClasses[houseCell.id] = ' highlightRow'\n        }   \n        \n        let lockedeCells = grid[step.locked.type][step.locked.id].cells.filter( v=> !step.ids.includes(v.id))\n        for( let lockedeCell of lockedeCells){\n          highlight.boxClasses[lockedeCell.id] = ' highlightRow'\n        }           \n\n        return highlight\n}\n\nconst fish = (grid,step) => {\n  let highlight = defaultHighlight(grid, step)\n\n  let targetCells = grid.cells\n                    .filter( v=> step.rows.includes(v.rowID))\n                    .filter( v=> step.columns.includes(v.columnID))\n                    .filter( v=> [...v.possibilities].includes(step.digit))\n                    .map(v=>v.id)\n  for( let id of targetCells){\n    highlight.boxClasses[id] = ' targetCell '\n  }\n\n\n  highlight.keep = targetCells\n\n  highlight.ruleOut = grid.cells\n    .filter( v => step.rows.indexOf(v.rowID) === -1 )\n    .filter( v => step.columns.indexOf(v.columnID) > -1 )\n    .filter( v => v.possibilities.has(step.digit) )\n    .map(v=>v.id)       \n\n  let rowCells = grid.cells.filter( v=> step.rows.includes(v.rowID))\n  for( let rowCell of rowCells){\n    highlight.boxClasses[rowCell.id] = highlight.boxClasses[rowCell.id] + ' highlightRow'\n  }   \n\n  let columnCells = grid.cells.filter( v=> step.columns.includes(v.columnID))\n  for( let columnCell of columnCells){\n    highlight.boxClasses[columnCell.id] = highlight.boxClasses[columnCell.id] + ' highlightRow'\n  }     \n\n  highlight.rows = step.rows.map(r=> `R${r+1}`).join(' ')\n  highlight.columns = step.columns.map(r=> `C${r+1}`).join(' ')\n\n  highlight.digits = [step.digit]\n\n  return highlight\n}\n\nconst xyChain = (grid,step) => {\n  let highlight = defaultHighlight(grid, step)  \n\n\n  for(let link of step.chain){\n    let facet = {}\n    facet.id = link.cell.id\n    facet.box = ' targetCell '\n    facet.cannotBe = link.cannotBe\n    facet.mustBe = link.mustBe\n\n    highlight.facets.push(facet)\n  }\n\n  let start = step.chain[0];\n  let end = step.chain[step.chain.length - 1];\n  let excluded = [...start.cell.canSee]\n      .filter(v => end.cell.canSee.has(v))\n      .filter(v => v.possibilities.has(start.cannotBe))\n\n  for(let cell of excluded){\n    let facet = {}\n    facet.id = cell.id\n    facet.box = ' highlight2 '\n    facet.exclude = start.cannotBe\n\n    highlight.facets.push(facet)\n  }\n\n  return highlight\n}\n\nexport default class Highlighter  {\n  constructor() {\n\n    this.currentState = 'Off';\n    this.machine = {\n          'Off': {\n            NakedSingle: 'NakedSingle', \n            HiddenSingle: 'HiddenSingle',  \n            Naked: 'Naked',  \n            Hidden: 'Hidden',  \n            LockedCandidate: 'LockedCandidate',  \n            Fish: 'Fish', \n            XYChain:'XYChain',\n            clear: 'Off'        \n          },\n          'NakedSingle': {\n            clear: 'Off'\n          },\n          'HiddenSingle': {\n            clear: 'Off'\n          },\n          'Naked': {\n            clear: 'Off'\n          },\n          'Hidden': {\n            clear: 'Off'\n          }, \n          'LockedCandidate': {\n            clear: 'Off'\n          }, \n          'Fish': {\n            clear: 'Off'\n          },    \n          'XYChain': {\n            clear: 'Off'\n          }                  \n        }\n     \n  }\n\n  transition(state, action) {\n    if (this.machine[state][action]) {      \n      return this.machine[state][action];\n    }  \n  }\n\n  changes(grid, step, state){\n    let f = {\n      'Off': off, \n      'NakedSingle': nakedSingle, \n      'HiddenSingle': hiddenSingle,  \n      'Naked': naked,  \n      'Hidden': hidden,  \n      'LockedCandidate': lockedCandidate,  \n      'Fish': fish, \n      'XYChain':xyChain\n    }    \n    \n    return f[state](grid, step)\n  }\n\n  input(grid, step) {\n    const state = this.currentState;\n  \n    this.currentState = this.transition(state, step.strategy.type)    \n\n    return this.changes(grid, step, this.currentState)\n    \n  }\n}\n\n  \n\n\n\n","import React, { Component } from \"react\";\nimport { Solver, isValid } from \"sudoku\";\n\nimport HighlightButton from \"./components/HighlightButton\";\nimport ApplyButton from \"./components/ApplyButton\";\nimport AutoplayButton from \"./components/AutoplayButton\";\nimport Log from \"./components/Log.js\";\nimport Cell from \"./components/Cell.js\";\n\nimport Highlighter from \"./Highlighter.js\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            step: 1,\n            solver: new Solver(\n                \"000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000\"\n            ),\n            highLight: { used: [] },\n            items: [],\n            autoplay: false\n        };\n\n        // This binding is necessary to make `this` work in the callback\n        //this.highLight = this.highLight.bind(this);\n        this.apply = this.apply.bind(this);\n        this.autoplay = this.autoplay.bind(this);\n        this.toggleAutoplay = this.toggleAutoplay.bind(this);\n        this.loadGridFromHash = this.loadGridFromHash.bind(this);\n\n        this.highlighter = new Highlighter();\n    }\n\n    loadGridFromHash() {\n        let solver;\n        let clear = { strategy: { type: \"clear\" } };\n\n        if (window.location.hash) {\n            let hash = window.location.hash.substring(1);\n            hash = hash\n                .replace(/(.{9})/g, \"$1\\n\")\n                .replace(/^\\s\\s*/, \"\")\n                .replace(/\\s\\s*$/, \"\");\n\n            let v = isValid(hash);\n            this.setState({ step: 1 });\n            this.setState({ items: [{ text: `${v.message}`, key: \"grid-info\" }] });\n\n            this.setState({ highLight: { on: false } });\n\n            this.highlighter.input(this.grid, clear);\n\n            if (hash.length && v.isValid) {\n                solver = new Solver(hash);\n            } else {\n                this.setState({ step: 1 });\n                this.state.items.unshift({ text: `Using default sudoku instead`, key: \"grid-info-d\" });\n                let items = this.state.items;\n                this.setState({ items: items });\n\n                let text =\n                    \"300200000\\n000107000\\n706030500\\n070009080\\n900020004\\n010800050\\n009040301\\n000702000\\n000008006\";\n                solver = new Solver(text);\n            }\n\n            this.setState({ solver: solver });\n        } else {\n            this.setState({ step: 1 });\n            this.setState({ items: [{ text: `Default sudoku`, key: \"grid-info\" }] });\n            let text =\n                \"043080250\\n600000000\\n000001094\\n900004070\\n000608000\\n010200003\\n820500000\\n000000005\\n034090710\";\n            solver = new Solver(text);\n        }\n\n        this.setState({ solver: solver });\n    }\n\n    componentDidMount() {\n        // 043080250\\n600000000\\n000001094\\n900004070\\n000608000\\n010200003\\n820500000\\n000000005\\n034090710\n        // 300200000\\n000107000\\n706030500\\n070009080\\n900020004\\n010800050\\n009040301\\n000702000\\n000008006\n        //let text = '000000000\\n007020400\\n008504900\\n009000800\\n510080027\\n000203000\\n000000000\\n435000196\\n180000054'\n        let self = this;\n        if (\"onhashchange\" in window) {\n            window.onhashchange = function() {\n                self.loadGridFromHash();\n            };\n        }\n        this.loadGridFromHash();\n\n        //if(this.state.autoplay){\n        this.timerID = setInterval(() => this.autoplay(), 1000);\n        // }\n        // else{\n        //   clearInterval(this.timerID);\n        // }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    highLight = () => {\n        if (this.state.highLight.on) {\n            return;\n        }\n        if (!this.state.solver.next()) {\n            return;\n        }\n\n        let step = this.state.solver.next();\n\n        let cell = this.state.solver.grid.cells[step.id];\n        // let digitClasses = {}\n        // let boxClasses = {}\n        // let cellContent = {}\n        //\n        // let ruleOut = []\n        // let keep = []\n        // let squares = []\n        // let rows = []\n        // let columns = []\n        // //let colors = [1,2,3,4,5,6,7,8,9]\n        // let locked\n        // let hiddenCells = []\n        let highLight = {};\n        let item = {};\n        if (cell) {\n            item = {\n                text: `${step.strategy.type}: The cell at ${cell.row},${cell.column},${cell.square} must be ${\n                    step.digit\n                } \\n`,\n                key: `${cell.id}-`\n            };\n            // rows = [cell.row]\n            // columns = [cell.column]\n            // squares = [cell.square]\n            // ruleOut = [...cell.canSee].filter(cell => [...cell.possibilities].includes(step.digit) ).map(v=>v.id)\n        } else {\n            item = { text: `${step.strategy.type}${step.length ? ` ${step.length}` : ``} \\n`, key: this.state.step };\n        }\n\n        // let digits = [step.digit]\n\n        // if(step.strategy.type === 'NakedSingle' && step.used.length === 8){\n        //   for(let i=0; i<8; i++){\n        //     let cell = this.state.solver.grid.cells[step.used[i]]\n        //     boxClasses[cell.id] = boxClasses[cell.id] + ' bgcolor' + cell.digit\n        //     digitClasses[cell.id] = digitClasses[cell.id] + ' color' + cell.digit\n        //   }\n        //   keep = [step.id]\n        // }else{\n        //   keep = [step.id]\n        // }\n\n        // hidden\n        // if(step.strategy.type === 'HiddenSingle'){\n\n        //   let unfilledCellsInHouse = this.state.solver.grid[step.house.type][step.house.id].cells.filter( v => v.digit === 0).filter(v=> v.id !== cell.id)\n        //   let nextColor\n        //   let color\n        //   let bgcolor\n        //   for( let unfilledCell of unfilledCellsInHouse){\n        //     let seenByCells = [...unfilledCell.canSee].filter( v => v.digit === step.digit)\n        //     let seenBy\n\n        //     let seenInSquare = seenByCells.filter( v=> v.squareID === unfilledCell.squareID)\n        //     if(seenInSquare.length){\n\n        //         seenBy = seenInSquare[0]\n        //         if(!digitClasses[seenBy.id]){\n        //           nextColor = colors.shift()\n        //           color = ' color' + nextColor\n        //           bgcolor = ' bgcolor' + nextColor\n        //           digitClasses[seenBy.id] = color + bgcolor\n        //           digitClasses[unfilledCell.id] = ' color' + nextColor\n        //         } else {\n        //           digitClasses[seenBy.id] = digitClasses[seenBy.id]\n        //           digitClasses[unfilledCell.id] = ' color' + nextColor\n        //         }\n\n        //     }\n        //     else{\n\n        //       let seenOutsideSquare = seenByCells.filter( v=> v.squareID !== unfilledCell.squareID)\n        //       if(seenOutsideSquare.length){\n        //         seenBy = seenOutsideSquare[0]\n        //         if(!digitClasses[seenBy.id]){\n        //           nextColor = colors.shift()\n        //           color = ' color' + nextColor\n        //           bgcolor = ' bgcolor' + nextColor\n        //           digitClasses[seenBy.id] = color + bgcolor\n        //           digitClasses[unfilledCell.id] = ' color' + nextColor\n        //         } else {\n        //           digitClasses[seenBy.id] = digitClasses[seenBy.id]\n        //           digitClasses[unfilledCell.id] = ' color' + nextColor\n        //         }\n        //       }\n        //     }\n\n        //     keep = [step.id]\n        //     cellContent[unfilledCell.id] = 'X'\n        //   }\n\n        // }\n\n        // let highLight2 = this.highlighter.naked(this.state.solver.grid, step)\n        // console.log(highLight2)\n        // if(step.strategy.type === 'Naked'){\n        //   //let colors = [1,2,3,4,5,6,7,8,9]\n        //   for( let id of step.id){\n        //     boxClasses[id] = ' targetCell '\n        //   }\n        //   ruleOut = this.state.solver.grid[step.house.type][step.house.id].cells\n        //   .filter( v => v.digit === 0) //unused\n        //   .filter( v => step.id.indexOf(v.id) === -1)  // not in naked\n        //   .filter( v => [...v.possibilities].some(p=> [...step.digits].includes(p))) // has digits as possibles\n        //   .map(v=>v.id)\n\n        //   digits = [...step.digits]\n\n        //   let cells = this.state.solver.grid[step.house.type][step.house.id].cells.filter( v=> step.id.includes(v.id))\n        //   rows = cells.map( v=> `${v.row}`).join(' ')\n        //   columns = cells.map( v=> `${v.column}`).join(' ')\n        //   squares = cells.map( v=> `${v.square}`).join(' ')\n\n        //   keep = step.id\n        // }\n\n        // if(step.strategy.type === 'LockedCandidate'){\n\n        //   let colors = [1,2,3,4,5,6,7,8,9]\n\n        //   for( let id of step.ids){\n        //     boxClasses[id] = ' targetCell '\n        //   }\n        //   //\n        //   let lockedHouse = this.state.solver.grid[step.house.type][step.house.id]\n\n        //   let unfilledCellsInLocked = lockedHouse.cells\n        //   .filter( v => v.digit === 0)\n        //   .filter( v => !step.ids.includes(v.id))\n\n        //   let nextColor\n        //   let color\n        //   let bgcolor\n\n        //   for( let unfilledCell of unfilledCellsInLocked){\n        //     let seenByCells = [...unfilledCell.canSee].filter( v => v.digit === step.digit)\n        //     let seenBy = seenByCells[0]\n\n        //     if(seenBy){\n        //       if(!digitClasses[seenBy.id]){\n        //         nextColor = colors.shift()\n        //         color = ' color' + nextColor\n        //         bgcolor = ' bgcolor' + nextColor\n        //         digitClasses[seenBy.id] = color + bgcolor\n        //         digitClasses[unfilledCell.id] = ' color' + nextColor\n        //       } else {\n        //         digitClasses[seenBy.id] = digitClasses[seenBy.id]\n        //         digitClasses[unfilledCell.id] = ' color' + nextColor\n        //       }\n        //     }\n\n        //     cellContent[unfilledCell.id] = 'X'\n        //   }\n\n        //   //\n        //   ruleOut = this.state.solver.grid[step.locked.type][step.locked.id].cells\n        //   .filter( v => step.ids.indexOf(v.id) === -1 )\n        //   .filter( v => v.possibilities.has(step.digit))\n        //   .map(v=>v.id)\n\n        //   keep = step.ids\n\n        //   digits = [step.digit]\n\n        //   locked = step.locked\n\n        //   let cells = this.state.solver.grid[step.house.type][step.house.id].cells.filter( v=> step.ids.includes(v.id))\n        //   rows = cells.map( v=> `${v.row}`).join(' ')\n        //   columns = cells.map( v=> `${v.column}`).join(' ')\n        //   squares = cells.map( v=> `${v.square}`).join(' ')\n\n        // }\n\n        // if(step.strategy.type === 'Hidden'){\n        //   //let colors = [1,2,3,4,5,6,7,8,9]\n        //   for( let id of step.id){\n        //     boxClasses[id] = ' targetCell '\n        //   }\n        //   ruleOut = []\n\n        //   digits = [...step.digits]\n\n        //   let cells = this.state.solver.grid[step.house.type][step.house.id].cells.filter( v=> step.id.includes(v.id))\n        //   rows = cells.map( v=> `${v.row}`).join(' ')\n        //   columns = cells.map( v=> `${v.column}`).join(' ')\n        //   squares = cells.map( v=> `${v.square}`).join(' ')\n\n        //   hiddenCells = step.id\n        // }\n\n        // if(step.strategy.type === 'Fish'){\n        //   let targetCells = this.state.solver.grid.cells.filter( v=> step.rows.includes(v.rowID)).filter( v=> step.columns.includes(v.columnID)).map(v=>v.id)\n        //   for( let id of targetCells){\n        //     boxClasses[id] = ' targetCell '\n        //   }\n\n        //   keep = targetCells\n\n        //   ruleOut = this.state.solver.grid.cells\n        //     .filter( v => step.rows.indexOf(v.rowID) === -1 )\n        //     .filter( v => step.columns.indexOf(v.columnID) > -1 )\n        //     .filter( v => v.possibilities.has(step.digit) )\n        //     .map(v=>v.id)\n\n        //   //return {'digit':digit, 'rows':fishRows, 'columns':fishColumns, 'length':fishRows.length, 'strategy':this}\n\n        //   rows = step.rows.map(r=> `R${r+1}`).join(' ')\n        //   columns = step.columns.map(r=> `C${r+1}`).join(' ')\n\n        //   digits = [step.digit]\n\n        // }\n\n        // if(step.strategy.type === 'NakedSingle'\n        //   || step.strategy.type === 'HiddenSingle'\n        //   || step.strategy.type === 'Naked'\n        //   || step.strategy.type === 'LockedCandidate'\n        //   || step.strategy.type === 'Hidden'\n        //   || step.strategy.type === 'Fish'         ){\n        highLight = this.highlighter.input(this.state.solver.grid, step);\n        // console.log( highLight )\n        // }\n        // else{\n        //   highLight = {\n        //     on:true,\n        //     rows: rows,\n        //     columns: columns,\n        //     squares: squares,\n        //     cell:cell,\n        //     digits:digits,\n        //     ruleOut: ruleOut,\n        //     keep: keep,\n        //     house:step.house,\n        //     ids:step.ids,\n        //     strategy:step.strategy,\n        //     hiddenCells:hiddenCells,\n        //     length:step.length,\n        //     locked:locked,\n        //     boxClasses: boxClasses,\n        //     digitClasses: digitClasses,\n        //     cellContent: cellContent\n        //   }\n        // }\n\n        this.setState({ highLight: highLight });\n        this.state.items.unshift(item);\n    };\n\n    apply = () => {\n        let clear = { strategy: { type: \"clear\" } };\n\n        if (!this.state.solver.next()) {\n            this.setState({\n                autoplay: false\n            });\n            return;\n        }\n\n        this.setState({ highLight: { on: false } });\n        this.highlighter.input(this.grid, clear);\n\n        this.state.solver.apply(this.state.solver.next());\n\n        this.setState({ step: this.state.step + 1 });\n    };\n\n    toggleAutoplay = () => {\n        this.setState({\n            autoplay: !this.state.autoplay\n        });\n    };\n\n    autoplay = () => {\n        if (this.state.autoplay) {\n            this.highLight();\n            setTimeout(this.apply, 700);\n        }\n    };\n\n    showSquare(square) {\n        if (this.state.highLight.on && this.state.highLight.squares.includes(square)) {\n            return \"show\";\n        }\n        return \"\";\n    }\n\n    showRow(row) {\n        if (this.state.highLight.on && this.state.highLight.rows.includes(row)) {\n            return \"highlight5\";\n        }\n        return \"\";\n    }\n\n    showColumn(column) {\n        if (this.state.highLight.on && this.state.highLight.columns.includes(column)) {\n            return \"highlight5\";\n        }\n        return \"\";\n    }\n\n    render() {\n        const { solver, items } = this.state;\n        let self = this;\n\n        return (\n            <div className=\"App\">\n                <div className=\"grid\">\n                    <div className=\"columnDetail\" />\n                    <div className={`columnDetail ${self.showColumn(\"C1\")}`} id=\"column1\">\n                        C1\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C2\")}`} id=\"column2\">\n                        C2\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C3\")}`} id=\"column3\">\n                        C3\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C4\")}`} id=\"column4\">\n                        C4\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C5\")}`} id=\"column5\">\n                        C5\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C6\")}`} id=\"column6\">\n                        C6\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C7\")}`} id=\"column7\">\n                        C7\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C8\")}`} id=\"column8\">\n                        C8\n                    </div>\n                    <div className={`columnDetail ${self.showColumn(\"C9\")}`} id=\"column9\">\n                        C9\n                    </div>\n\n                    <div className={`columnDetail ${self.showRow(\"R1\")}`} id=\"row1\">\n                        R1\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 0)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R2\")}`} id=\"row2\">\n                        R2\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 1)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R3\")}`} id=\"row3\">\n                        R3\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 2)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R4\")}`} id=\"row4\">\n                        R4\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 3)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R5\")}`} id=\"row5\">\n                        R5\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 4)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R6\")}`} id=\"row6\">\n                        R6\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 5)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R7\")}`} id=\"row7\">\n                        R7\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 6)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R8\")}`} id=\"row8\">\n                        R8\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 7)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`columnDetail ${self.showRow(\"R9\")}`} id=\"row9\">\n                        R9\n                    </div>\n                    {solver.grid.cells\n                        .filter((cell) => cell.rowID === 8)\n                        .map(function(cell) {\n                            return <Cell cell={cell} highlight={self.state.highLight} key={cell.id} />;\n                        })}\n\n                    <div className={`S1 ${self.showSquare(\"S1\")}`}>S1</div>\n                    <div className={`S2 ${self.showSquare(\"S2\")}`}>S2</div>\n                    <div className={`S3 ${self.showSquare(\"S3\")}`}>S3</div>\n                    <div className={`S4 ${self.showSquare(\"S4\")}`}>S4</div>\n                    <div className={`S5 ${self.showSquare(\"S5\")}`}>S5</div>\n                    <div className={`S6 ${self.showSquare(\"S6\")}`}>S6</div>\n                    <div className={`S7 ${self.showSquare(\"S7\")}`}>S7</div>\n                    <div className={`S8 ${self.showSquare(\"S8\")}`}>S8</div>\n                    <div className={`S9 ${self.showSquare(\"S9\")}`}>S9</div>\n                </div>\n                <div className=\"notes\">\n                    <HighlightButton action={this.highLight} step={this.state.step} />\n\n                    <ApplyButton action={this.apply} step={this.state.step} />\n\n                    <AutoplayButton action={this.toggleAutoplay} />\n\n                    <Log items={items} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}